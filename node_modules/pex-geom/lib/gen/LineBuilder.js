// Generated by CoffeeScript 1.7.1
var Geometry, LineBuilder, Vec2, Vec3,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Vec2 = require('../Vec2');

Vec3 = require('../Vec3');

Geometry = require('../Geometry');

LineBuilder = (function(_super) {
  __extends(LineBuilder, _super);

  function LineBuilder() {
    LineBuilder.__super__.constructor.call(this, {
      vertices: true,
      colors: true
    });
  }

  LineBuilder.prototype.addLine = function(a, b, colorA, colorB) {
    colorA = colorA || {
      r: 1,
      g: 1,
      b: 1,
      a: 1
    };
    colorB = colorB || colorA;
    this.vertices.push(Vec3.create().copy(a));
    this.vertices.push(Vec3.create().copy(b));
    this.colors.push(colorA);
    this.colors.push(colorB);
    this.vertices.dirty = true;
    return this.colors.dirty = true;
  };

  LineBuilder.prototype.addCross = function(pos, size, color) {
    var halfSize;
    size = size || 0.1;
    halfSize = size / 2;
    color = color || {
      r: 1,
      g: 1,
      b: 1,
      a: 1
    };
    this.vertices.push(Vec3.create().set(pos.x - halfSize, pos.y, pos.z));
    this.vertices.push(Vec3.create().set(pos.x + halfSize, pos.y, pos.z));
    this.vertices.push(Vec3.create().set(pos.x, pos.y - halfSize, pos.z));
    this.vertices.push(Vec3.create().set(pos.x, pos.y + halfSize, pos.z));
    this.vertices.push(Vec3.create().set(pos.x, pos.y, pos.z - halfSize));
    this.vertices.push(Vec3.create().set(pos.x, pos.y, pos.z + halfSize));
    this.colors.push(color);
    this.colors.push(color);
    this.colors.push(color);
    this.colors.push(color);
    this.colors.push(color);
    return this.colors.push(color);
  };

  LineBuilder.prototype.reset = function() {
    this.vertices.length = 0;
    this.colors.length = 0;
    this.vertices.dirty = true;
    return this.colors.dirty = true;
  };

  return LineBuilder;

})(Geometry);

module.exports = LineBuilder;
